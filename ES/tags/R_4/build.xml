<?xml version="1.0" encoding="UTF-8"?>
<project name="RestGWT" default="compile" basedir=".">
	<description>Rest Build File</description>
	<!-- Read environment properties first -->
	<property environment="env" />
	<!-- Override default property values with an external properties file, 
		if present, with the user's machine specific configuration. -->
	<property file="${user.home}/build.properties" />
	<!-- Then read the default configuration properties -->
	<property file="build.properties" />

	<property name="ant.build.javac.source" value="1.6" />
	<property name="ant.build.javac.target" value="1.6" />

	<property name="javac.encoding" value="UTF-8" />
	<property name="java.file.encoding" value="UTF-8" />

	<property name="src.rel-dir" value="src" />
	<property name="build.rel-dir" value="build" />
	<property name="lib.rel-dir" value="../lib" />

	<property name="main.src.rel-dir" value="${src.rel-dir}/main" />
	<property name="test.src.rel-dir" value="${src.rel-dir}/test" />

	<property name="dml.filename" value="domain.dml" />

	<property name="java.main.src.rel-dir" value="${main.src.rel-dir}/java" />
	<property name="java.test.src.rel-dir" value="${test.src.rel-dir}/java" />
	<property name="dml.src.rel-dir" value="${main.src.rel-dir}/dml" />
	<property name="generated-src.build.rel-dir" value="${build.rel-dir}/src" />
	<property name="classes.build.rel-dir" value="${build.rel-dir}/classes" />

	<property name="dml.rel-file" value="${dml.src.rel-dir}/${dml.filename}" />


	<property name="gwt.war.rel-dir" value="war" />
	<property name="gwt.war.web-inf.rel-dir" value="${gwt.war.rel-dir}/WEB-INF" />
	<property name="gwt.war.classes.rel-dir" value="${gwt.war.web-inf.rel-dir}/classes" />
	<property name="gwt.war.lib.rel-dir" value="${gwt.war.web-inf.rel-dir}/lib" />
	<!-- Arguments to gwtc and devmode targets -->
	<property name="gwt.args" value="" />



	<path id="project.classpath">
		<pathelement location="${classes.build.rel-dir}" />
		<fileset dir="${lib.rel-dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${gwt.sdk.home}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef resource="dml-ant.xml" classpathref="project.classpath" />

	<target name="prepare">
		<echo message="Preparing the project for build..." />
		<mkdir dir="${classes.build.rel-dir}" />
	</target>

	<target name="generate-domain" depends="prepare">
		<echo message="Generating base domain classes..." />
		<echo message="Using: ${dml.rel-file}" />
		<dml-domain-generator destDirectory="${java.main.src.rel-dir}"
			destDirectoryBase="${generated-src.build.rel-dir}">
			<fileset file="${dml.rel-file}" />
		</dml-domain-generator>
	</target>

	<target name="compile" depends="compile-domain, compile-tests, instrument-classes"
		description="Compiles the project" />

	<target name="compile-domain" depends="generate-domain">
		<echo message="Compiling sources..." />
		<javac destdir="${classes.build.rel-dir}" debug="true"
			debuglevel="lines,vars,source" optimize="true" deprecation="true"
			verbose="false" includeantruntime="false">
			<classpath refid="project.classpath" />
			<src>
				<pathelement
					path="${generated-src.build.rel-dir}:${java.main.src.rel-dir}" />
			</src>
			<compilerarg line="" />
		</javac>
		<echo message="Copy Log4j configuration to classes directory" />
		<copy todir="${classes.build.rel-dir}" file="log4j.properties" />
	</target>

	<target name="instrument-classes" depends="compile-domain, compile-tests">
		<echo message="Injecting FenixFramework Voodoo Magic..." />
		<dml-post-processor dir="${classes.build.rel-dir}">
			<fileset file="${dml.rel-file}" />
			<classpath refid="project.classpath" />
		</dml-post-processor>
	</target>

	<target name="populate" depends="compile" description="Populates the initial data">
		<java classname="pt.ist.rest.RestSetup" fork="false">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</java>
	</target>

	<target name="run" depends="compile" description="Runs the program">
		<java classname="pt.ist.rest.PresentationServer" fork="false">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
		</java>
	</target>

	<target name="clean" depends="clean-gwt"
		description="Cleans the compiled classes and generated sources">
		<delete dir="${build.rel-dir}/src" />
		<delete dir="${build.rel-dir}/classes" />
	</target>

	<target name="clean-gwt">
		<delete file="${gwt.war.rel-dir}/rest.log" />
		<delete dir="${gwt.war.rel-dir}/src" />
		<delete dir="${gwt.war.classes.rel-dir}" />
		<delete dir="${gwt.war.web-inf.rel-dir}/images" />
		<delete dir="${gwt.war.web-inf.rel-dir}/deploy" />
		<delete dir="${gwt.war.rel-dir}/rest" />
		<delete dir="gwt-UnitCache" />
		<delete dir="${gwt.war.rel-dir}/restgwt" /> 
	</target>

	<target name="compile-tests" depends="compile-domain"
		description="Compile the tests">
		<javac destdir="${classes.build.rel-dir}" debug="true" verbose="false"
			debuglevel="lines,vars,source" optimize="true" deprecation="true"
			includeantruntime="false" encoding="${javac.encoding}">
			<classpath refid="project.classpath" />
			<src>
				<pathelement path="${java.test.src.rel-dir}" />
			</src>
		</javac>
	</target>

	<target name="test" depends="compile" description="Run the tests">
		<junit fork="yes" forkmode="once">
			<jvmarg value="-XX:UseSplitVerifier" />
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
			<!-- <test name="pt.ist.rest.service.CreateNewContactServiceTest" /> <test 
				name="pt.ist.rest.service.RemoveContactServiceTest" /> -->
		</junit>
	</target>

	<property name="sql.driver" value="com.mysql.jdbc.Driver" />
	<property name="sql.db" value="rest" />
	<property name="sql.url" value="jdbc:mysql://localhost:3306" />
	<property name="sql.user" value="root" />
	<property name="sql.pass" value="rootroot" />

	<target name="clean-db" description="Recreated project's database">
		<echo message="Creating SQL database '${sql.db}'" />
		<sql driver="${sql.driver}" url="${sql.url}" userid="${sql.user}"
			password="${sql.pass}">
			<classpath refid="project.classpath" />
			DROP DATABASE IF EXISTS ${sql.db};
		</sql>
		<sql driver="${sql.driver}" url="${sql.url}" userid="${sql.user}"
			password="${sql.pass}">
			<classpath refid="project.classpath" />
			CREATE DATABASE IF NOT EXISTS ${sql.db};
		</sql>
	</target>



	<target name="gwtc" depends="compile"
		description="GWT compile to JavaScript (production mode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${java.main.src.rel-dir}" />
				<path refid="project.classpath" />
			</classpath>
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xmx256M" />
			<arg line="-war" />
			<arg value="${gwt.war.rel-dir}" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="pt.ist.rest.RestGWT" />
		</java>
	</target>

	<target name="gwt-devmode-prepare" depends="compile">
		<echo message="Preparing GWT to run within Eclipse..." />
		<echo message="-- Checking WAR classes directory" />
		<mkdir dir="${gwt.war.classes.rel-dir}" />
		<echo message="-- Copy source of GWT classes to WAR directory" />
		<copy todir="${gwt.war.classes.rel-dir}">
			<fileset dir="${java.main.src.rel-dir}" includes="**/*.gwt.xml" />
		</copy>
		<echo message="-- Copy Log4j configuration to WAR directory" />
		<copy todir="${gwt.war.classes.rel-dir}" file="log4j.properties" /><!-- 
			not really needed -->
		<echo message="-- Copy DML definition to WAR directory" />
		<copy todir="${gwt.war.rel-dir}/src/main/dml" file="${dml.rel-file}" />
		<echo message="-- Copy images to WAR directory" />
		<copy todir="${gwt.war.web-inf.rel-dir}/images">
			<fileset dir="${gwt.war.rel-dir}/images" />
		</copy>
		<echo message="-- Copy DML definition to WAR classes directory" />
		<copy todir="${gwt.war.classes.rel-dir}/src/main/dml" file="${dml.rel-file}" />
	</target>

	<target name="gwt-devmode" depends="gwt-devmode-prepare">
		<echo message="Start GWT devmode with URL='${startUpURL}'" />
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
			<classpath>
				<path refid="project.classpath" />
				<pathelement location="${java.main.src.rel-dir}" />
			</classpath>
			<jvmarg value="-Xmx256M" />
			<arg value="-startupUrl" />
			<arg value="${startUpURL}" />
			<arg line="-war" />
			<arg value="${gwt.war.rel-dir}" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="pt.ist.rest.RestGWT" />
		</java>
	</target>

	<target name="devmode-local"
		description="Runs GWT in development mode with local configuration">
		<antcall target="gwt-devmode">
			<param name="startUpURL" value="RestGWT.html" />
		</antcall>
	</target>

	<target name="devmode-remote"
		description="Runs GWT in development mode with remote configuration">
		<antcall target="gwt-devmode">
			<param name="startUpURL" value="remote.html" />
		</antcall>
	</target>

	<target name="print-env-vars" description="Prints all environment variables">
		<propertyset id="environment">
			<propertyref prefix="env." />
		</propertyset>
		<property name="env_prop" refid="environment" />
		<echo>${env_prop}</echo>
	</target>

	<target name="repeat" depends="clean,clean-db,populate,gwtc,devmode-local"
		description="Restart and Cleans the compiled gwt generated sources">
	</target>

</project>
